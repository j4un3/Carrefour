/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package be.esi.g34840.carrefour.gui;

import be.esi.g34840.carrefour.business.CarrefourServeurInterface;
import be.esi.g34840.carrefour.dto.CarrefourAlert;
import be.esi.g34840.carrefour.dto.CarrefourEtat;
import be.esi.g34840.carrefour.dto.CarrefourParam;
import be.esi.g34840.carrefour.dto.CarrefourSimulation;
import be.esi.gui.outils.MsgOutils;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JDialog;
import javax.swing.JFrame;

/**
 *
 * @author J4un3
 */
public class Historique extends javax.swing.JDialog {

    private CarrefourServeurInterface serveur;

    /**
     * Creates new form Historique
     */
    public Historique(CarrefourServeurInterface serveur) {
        super(new JFrame(), false);
        this.serveur = serveur;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        dateTimePicker1 = new com.lavantech.gui.comp.DateTimePicker();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        dateTimePicker2 = new com.lavantech.gui.comp.DateTimePicker();
        dateTimePicker3 = new com.lavantech.gui.comp.DateTimePicker();
        jComboBox2 = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Historique d'un moment"));

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Etat des feux", "Paramètre des feux" }));

        jButton1.setText("Recherche");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(dateTimePicker1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 92, Short.MAX_VALUE)
                        .add(jButton1)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(dateTimePicker1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton1))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Historique d'une période"));

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nombre de changements de feux", "Toutes les alertes", "Simulation" }));

        jButton2.setText("Recherche");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(jComboBox2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(jButton2))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(dateTimePicker2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(dateTimePicker3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(58, 58, 58))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(dateTimePicker3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(dateTimePicker2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(18, 18, 18)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jComboBox2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jButton2))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 400, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        layout.linkSize(new java.awt.Component[] {jPanel1, jPanel2}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (dateTimePicker1.getDate().after(new Date())) {
            MsgOutils.erreur("Erreur de moment", "Le moment que vous avez choisi est improbable.\n"
                    + "Le moment ne doit pas dépassé celui du présent.");
        } else {
            switch (jComboBox1.getSelectedIndex()) {
                case 0:
                    rechercheEtat();
                    break;
                case 1:
                    rechercheParam();
                    break;

            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void rechercheEtat() {
        try {
            CarrefourEtat etat = serveur.getEtatDB(dateTimePicker1.getDate());
            if (etat == null) {
                MsgOutils.information("No result", "Il y à aucun résultat pour ce moment.");
            } else {
                MsgOutils.information("Résultat", " Feu véhicule Nord-Sud : " + etat.getFeux(0)
                        + "\n Feu véhicule Est-Ouest " + etat.getFeux(1)
                        + "\n Feu piéton Nord-Sud : " + etat.getFeux(2)
                        + "\n Feu piéton Est-Ouest : " + etat.getFeux(3));
            }
        } catch (RemoteException ex) {
            MsgOutils.erreur("ConnectException", "Problème de connection avec "
                    + "le serveur.\n L'application va se fermer.");
            System.exit(0);
        }
    }

    /**
     * Retourne les paramètres d'un moment donnée
     */
    private void rechercheParam() {
        try {
            CarrefourParam paramDB = serveur.getParamDB(dateTimePicker1.getDate());
            if (paramDB == null) {
                MsgOutils.information("No result", "Il y à aucun résultat pour ce moment.");
            } else {
                MsgOutils.information("Résultat", " Feu véhicule vert Nord-Sud : " + paramDB.getFeuVertVehiculeNordSud()
                        + "\n Feu véhicule orange Nord-Sud : " + paramDB.getFeuOrangeVehiculeNordSud()
                        + "\n Feu véhicule Rouge Nord-Sud : " + paramDB.getFeuRougeVehiculeNordSud()
                        + "\n Feu véhicule vert Est-Ouest : " + paramDB.getFeuVertVehiculeEstOuest()
                        + "\n Feu véhicule orange Est-Ouest : " + paramDB.getFeuOrangeVehiculeEstOuest()
                        + "\n Feu véhicule Rouge Est-Ouest : " + paramDB.getFeuRougeVehiculeEstOuest()
                        + "\n Feu piéton vert Nord-Sud : " + paramDB.getFeuVertPietonNordSud()
                        + "\n Feu piéton orange Nord-Sud : " + paramDB.getFeuOrangePietonNordSud()
                        + "\n Feu piéton rouge Nord-Sud : " + paramDB.getFeuRougePietonNordSud()
                        + "\n Feu piéton vert Est-Ouest : " + paramDB.getFeuVertPietonEstOuest()
                        + "\n Feu piéton orange Est-Ouest : " + paramDB.getFeuOrangePietonEstOuest()
                        + "\n Feu piéton rouge Est-Ouest : " + paramDB.getFeuRougePietonEstOuest());
            }
        } catch (RemoteException ex) {
            MsgOutils.erreur("ConnectException", "Problème de connection avec "
                    + "le serveur.\n L'application va se fermer.");
            System.exit(0);
        }
    }
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (dateTimePicker2.getDate().after(dateTimePicker3.getDate())) {
            MsgOutils.erreur("Erreur de moment", "Le moment de gauche ne doit pas être après le moment de droite.");
        } else if (dateTimePicker2.getDate().after(new Date()) || dateTimePicker3.getDate().after(new Date())) {
            MsgOutils.erreur("Erreur de moment", " Au moins un des moments est improbalbe"
                    + "\n Le moment ne doit pas dépassé celui du présent.");
        } else {
            switch (jComboBox2.getSelectedIndex()) {
                case 0:
                    nbChangement();
                    break;
                case 1:
                    panelAlert();
                    break;
                case 2:
                    simulation();
                    break;


            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    /**
     * Affiche le nombre de changement d'état qu'il y a eu pendant une période
     */
    private void nbChangement() {
        try {
            MsgOutils.information("Nombre de changement d'état : ", "" + serveur.getNombreEtatDB(dateTimePicker2.getDate(), dateTimePicker3.getDate()));
        } catch (RemoteException ex) {
            MsgOutils.erreur("ConnectException", "Problème de connection avec "
                    + "le serveur.\n L'application va se fermer.");
            System.exit(0);
        }
    }

    /**
     * Permet de crée un panel reprenant les différentes alertes durant une
     * période
     */
    private void panelAlert() {

        try {

            ArrayList<CarrefourAlert> alertDB = serveur.getAlertDB(dateTimePicker2.getDate(), dateTimePicker3.getDate());
            if (!alertDB.isEmpty()) {
                JDialog alert = new JDialog(new JFrame(), false);
                alert.setContentPane(new PanelAffichage(alertDB));
                alert.setVisible(true);
                alert.pack();
            } else {
                MsgOutils.information("No result", "Il y à aucun résultat pour cette période.");
            }
        } catch (RemoteException ex) {
            MsgOutils.erreur("ConnectException", "Problème de connection avec "
                    + "le serveur.\n L'application va se fermer.");
            System.exit(0);
        }

    }

    /**
     * Permet de crée un panel reprenant les différents états pendant une
     * période et demande au serveur de crée et envoyer un jasperreport
     * contenant le tout vers l'email contenu dans le
     * CarrefourInterface.properties
     */
    private void simulation() {
        try {
            ArrayList<CarrefourSimulation> simulationDB = serveur.getSimulationDB(dateTimePicker2.getDate(), dateTimePicker3.getDate());
            if (!simulationDB.isEmpty()) {
                JDialog alert = new JDialog(new JFrame(), false);
                alert.setContentPane(new PanelAffichage(simulationDB));
                alert.setVisible(true);
                alert.pack();
                serveur.JasperEtat(dateTimePicker2.getDate(), dateTimePicker3.getDate());
            } else {
                MsgOutils.information("No result", "Il y à aucun résultat pour cette période.");
            }
        } catch (RemoteException ex) {
            MsgOutils.erreur("ConnectException", "Problème de connection avec "
                    + "le serveur.\n L'application va se fermer.");
            System.exit(0);
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Historique.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Historique.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Historique.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Historique.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Historique dialog = new Historique(null);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.lavantech.gui.comp.DateTimePicker dateTimePicker1;
    private com.lavantech.gui.comp.DateTimePicker dateTimePicker2;
    private com.lavantech.gui.comp.DateTimePicker dateTimePicker3;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JComboBox jComboBox2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
